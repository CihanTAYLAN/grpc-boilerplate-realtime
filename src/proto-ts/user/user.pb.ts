// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: user/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GlobalResponse, PaginationMetadata, PaginationRequest, ResponseMetadata } from "../common/common.pb";
import { Timestamp } from "../google/protobuf/timestamp.pb";

export const protobufPackage = "grpcBoilerplate.user";

/**
 * User message schema
 * This message schema is used to store user information
 */
export interface User {
  /**
   * User id
   * This field is used to store user id
   * Required field for user identification
   */
  id: string;
  /**
   * User username
   * This field is used to store user username
   * Required field for user identification
   */
  username: string;
  /**
   * User email
   * This field is used to store user email
   * Required field for user contact and authentication
   */
  email: string;
  /**
   * User password
   * This field is used to store user password
   * Required field for user authentication
   * Optional field for user password
   */
  password: string;
  /**
   * User avatar
   * This field is used to store user avatar
   * Optional field for user avatar
   */
  avatar: string;
  /**
   * User created at
   * This human readable created at
   * Optional field for user created at
   */
  createdAtHuman: string;
  /**
   * User updated at
   * This human readable updated at
   * Optional field for user updated at
   */
  updatedAtHuman: string;
  /**
   * User created at
   * This timestamp created at
   * Optional field for user created at
   */
  createdAt:
    | Timestamp
    | undefined;
  /**
   * User updated at
   * This timestamp updated at
   * Optional field for user updated at
   */
  updatedAt: Timestamp | undefined;
}

/**
 * Create User Request
 * This request schema is used to create a new user
 */
export interface CreateUserRequest {
  /**
   * User username
   * This field is used to store user username
   * Required field for user identification
   */
  username: string;
  /**
   * User email
   * This field is used to store user email
   * Required field for user contact and authentication
   */
  email: string;
  /**
   * User password
   * This field is used to store user password
   * Required field for user authentication
   */
  password: string;
}

/**
 * Get User Request
 * This request schema is used to get a user by id
 */
export interface GetUserRequest {
  /**
   * User id
   * This field is used to store user id
   * Required field for user identification
   */
  id: string;
}

/**
 * Update User Request
 * This request schema is used to update a user
 */
export interface UpdateUserRequest {
  /**
   * User id
   * This field is used to store user id
   * Required field for user identification
   */
  id: string;
  /**
   * User username
   * This field is used to store user username
   * Optional field if provided, it will be updated
   */
  username: string;
  /**
   * User email
   * This field is used to store user email
   * Optional field if provided, it will be updated
   */
  email: string;
  /**
   * User password
   * This field is used to store user password
   * Optional field if provided, it will be updated
   */
  password: string;
}

/**
 * Delete User Request
 * This request schema is used to delete a user
 */
export interface DeleteUserRequest {
  /**
   * User id
   * This field is used to store user id
   * Required field for user identification
   */
  id: string;
}

/**
 * Get User Response
 * This response schema is used to return user information
 */
export interface GetUserResponse {
  /**
   * Response metadata
   * This field contains response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * User information
   * This field contains user details
   */
  user: User | undefined;
}

/**
 * Get Users Response
 * This response schema is used to return multiple users
 */
export interface GetUsersResponse {
  /**
   * Response metadata
   * This field contains response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Users list
   * This field contains list of users
   */
  users: User[];
}

/**
 * Get Users Pagination Response
 * This response schema is used to return paginated users
 */
export interface GetUsersPaginationResponse {
  /**
   * Response metadata
   * This field contains response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Pagination metadata
   * This field contains pagination information
   */
  paginationMetadata:
    | PaginationMetadata
    | undefined;
  /**
   * Users list
   * This field contains paginated list of users
   */
  users: User[];
}

export const GRPC_BOILERPLATE_USER_PACKAGE_NAME = "grpcBoilerplate.user";

/**
 * User Service
 * This Service is used to manage users
 */

export interface UserServiceClient {
  /**
   * Create User
   * This method is used to create a new user
   * @param CreateUserRequest - Create user request schema
   * @returns GetUserResponse - Created user information
   */

  createUser(request: CreateUserRequest): Observable<GetUserResponse>;

  /**
   * Get User
   * This method is used to get a user by id
   * @param GetUserRequest - User id
   * @returns GetUserResponse - User information
   */

  getUserStream(request: Observable<GetUserRequest>): Observable<GetUserResponse>;

  /**
   * Get Users Pagination
   * This method is used to get users with pagination
   * @param grpcBoilerplate.common.PaginationRequest - Pagination request schema
   * @returns GetUsersPaginationResponse - Users with pagination
   */

  getUsersPagination(request: PaginationRequest): Observable<GetUsersPaginationResponse>;

  /**
   * Get Users Pagination Stream
   * This method is used to get users with pagination stream
   * @param stream grpcBoilerplate.common.PaginationRequest - Pagination request schema
   * @returns stream GetUsersPaginationResponse - Users with pagination
   */

  getUsersPaginationStream(request: Observable<PaginationRequest>): Observable<GetUsersPaginationResponse>;

  /**
   * Update User
   * This method is used to update a user
   * @param UpdateUserRequest - Update user request schema
   * @returns GetUserResponse - Updated user information
   */

  updateUser(request: UpdateUserRequest): Observable<GetUserResponse>;

  /**
   * Delete User
   * This method is used to delete a user
   * @param DeleteUserRequest - Delete user request schema
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  deleteUser(request: DeleteUserRequest): Observable<GlobalResponse>;
}

/**
 * User Service
 * This Service is used to manage users
 */

export interface UserServiceController {
  /**
   * Create User
   * This method is used to create a new user
   * @param CreateUserRequest - Create user request schema
   * @returns GetUserResponse - Created user information
   */

  createUser(request: CreateUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  /**
   * Get User
   * This method is used to get a user by id
   * @param GetUserRequest - User id
   * @returns GetUserResponse - User information
   */

  getUserStream(request: Observable<GetUserRequest>): Observable<GetUserResponse>;

  /**
   * Get Users Pagination
   * This method is used to get users with pagination
   * @param grpcBoilerplate.common.PaginationRequest - Pagination request schema
   * @returns GetUsersPaginationResponse - Users with pagination
   */

  getUsersPagination(
    request: PaginationRequest,
  ): Promise<GetUsersPaginationResponse> | Observable<GetUsersPaginationResponse> | GetUsersPaginationResponse;

  /**
   * Get Users Pagination Stream
   * This method is used to get users with pagination stream
   * @param stream grpcBoilerplate.common.PaginationRequest - Pagination request schema
   * @returns stream GetUsersPaginationResponse - Users with pagination
   */

  getUsersPaginationStream(request: Observable<PaginationRequest>): Observable<GetUsersPaginationResponse>;

  /**
   * Update User
   * This method is used to update a user
   * @param UpdateUserRequest - Update user request schema
   * @returns GetUserResponse - Updated user information
   */

  updateUser(request: UpdateUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  /**
   * Delete User
   * This method is used to delete a user
   * @param DeleteUserRequest - Delete user request schema
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  deleteUser(request: DeleteUserRequest): Promise<GlobalResponse> | Observable<GlobalResponse> | GlobalResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUsersPagination", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["getUserStream", "getUsersPaginationStream"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
