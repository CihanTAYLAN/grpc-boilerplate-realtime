// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: auth/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GlobalResponse, ResponseMetadata } from "../common/common.pb";

export const protobufPackage = "grpcBoilerplate.auth";

/**
 * Register Ghost Request
 * This message schema is used for initial registration request
 */
export interface RegisterGhostRequest {
  /**
   * Username
   * Required field for user identification
   */
  username: string;
  /**
   * Email
   * Required field for user contact
   */
  email: string;
  /**
   * Password
   * Required field for user authentication
   */
  password: string;
}

/**
 * Register Request
 * This message schema is used for completing registration
 */
export interface RegisterRequest {
  /**
   * Register Token
   * Required field obtained from RegisterGhost response
   */
  registerToken: string;
  /**
   * Verification Code
   * Required field sent to user's email
   */
  verificationCode: string;
}

/**
 * Login Request
 * This message schema is used for user authentication
 */
export interface LoginRequest {
  /**
   * Email or Username
   * Required field for user identification
   */
  emailOrUsername: string;
  /**
   * Password
   * Required field for authentication
   */
  password: string;
}

/**
 * Logout Request
 * This message schema is used for user logout
 */
export interface LogoutRequest {
  /**
   * Access Token
   * Required field to invalidate session
   */
  accessToken: string;
}

/**
 * Refresh Token Request
 * This message schema is used for token refresh
 */
export interface RefreshTokenRequest {
  /**
   * Refresh Token
   * Required field to get new access token
   */
  refreshToken: string;
}

/**
 * Forgot Password Request
 * This message schema is used to initiate password reset
 */
export interface ForgotPasswordRequest {
  /**
   * Email or Username
   * Required field for user identification
   */
  emailOrUsername: string;
}

/**
 * Forgot Password Verify Request
 * This message schema is used to verify password reset code
 */
export interface ForgotPasswordVerifyRequest {
  /**
   * Verification Token
   * Required field from forgot password response
   */
  verificationToken: string;
  /**
   * Code
   * Required field sent to user's email
   */
  code: string;
}

/**
 * Reset Password Request
 * This message schema is used to set new password
 */
export interface ResetPasswordRequest {
  /**
   * Verification Token
   * Required field from forgot password verify response
   */
  verificationToken: string;
  /**
   * Password
   * Required field for new password
   */
  password: string;
  /**
   * Confirm Password
   * Required field to confirm new password
   */
  confirmPassword: string;
}

/**
 * Email Verify Start Request
 * This message schema is used to start email verification
 */
export interface EmailVerifyStartRequest {
  /**
   * Email
   * Required field to verify
   */
  email: string;
}

/**
 * Email Verify Finish Request
 * This message schema is used to complete email verification
 */
export interface EmailVerifyFinishRequest {
  /**
   * Token
   * Required field from email verify start response
   */
  token: string;
  /**
   * Code
   * Required field sent to user's email
   */
  code: string;
}

/**
 * Register Ghost Response
 * This message schema is used for register ghost response
 */
export interface RegisterGhostResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Register Token
   * Token for completing registration
   */
  registerToken: string;
}

/**
 * Register Response
 * This message schema is used for register response
 */
export interface RegisterResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Access Token
   * Token for API access
   */
  accessToken: string;
  /**
   * Refresh Token
   * Token for refreshing access token
   */
  refreshToken: string;
}

/**
 * Login Response
 * This message schema is used for login response
 */
export interface LoginResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Access Token
   * Token for API access
   */
  accessToken: string;
  /**
   * Refresh Token
   * Token for refreshing access token
   */
  refreshToken: string;
}

/**
 * Refresh Token Response
 * This message schema is used for token refresh response
 */
export interface RefreshTokenResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Access Token
   * New access token
   */
  accessToken: string;
  /**
   * Refresh Token
   * New refresh token
   */
  refreshToken: string;
}

/**
 * Forgot Password Response
 * This message schema is used for forgot password response
 */
export interface ForgotPasswordResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Verification Token
   * Token for password reset verification
   */
  verificationToken: string;
}

/**
 * Email Verify Start Response
 * This message schema is used for email verification start response
 */
export interface EmailVerifyStartResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * Verification Token
   * Token for email verification
   */
  verificationToken: string;
}

/**
 * Email Verify Finish Response
 * This message schema is used for email verification finish response
 */
export interface EmailVerifyFinishResponse {
  /**
   * Metadata
   * Response metadata
   */
  metadata: ResponseMetadata | undefined;
}

export const GRPC_BOILERPLATE_AUTH_PACKAGE_NAME = "grpcBoilerplate.auth";

/**
 * Auth Service
 * This service is used to manage authentication operations
 */

export interface AuthServiceClient {
  /**
   * Register Ghost
   * This method is used to start registration process
   * @param RegisterGhostRequest - Initial registration request schema
   * @returns RegisterGhostResponse - Registration token for verification
   */

  registerGhost(request: RegisterGhostRequest): Observable<RegisterGhostResponse>;

  /**
   * Register
   * This method is used to complete registration process
   * @param RegisterRequest - Registration verification request schema
   * @returns RegisterResponse - Access and refresh tokens
   */

  register(request: RegisterRequest): Observable<RegisterResponse>;

  /**
   * Login
   * This method is used to authenticate users
   * @param LoginRequest - Login credentials
   * @returns LoginResponse - Access and refresh tokens
   */

  login(request: LoginRequest): Observable<LoginResponse>;

  /**
   * Refresh Token
   * This method is used to get new access token using refresh token
   * @param RefreshTokenRequest - Refresh token
   * @returns RefreshTokenResponse - New access and refresh tokens
   */

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  /**
   * Logout
   * This method is used to invalidate tokens
   * @param LogoutRequest - Access token to invalidate
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  logout(request: LogoutRequest): Observable<GlobalResponse>;

  /**
   * Forgot Password
   * This method is used to start password reset process
   * @param ForgotPasswordRequest - Email or username for password reset
   * @returns ForgotPasswordResponse - Verification token for password reset
   */

  forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;

  /**
   * Forgot Password Verify
   * This method is used to verify password reset code
   * @param ForgotPasswordVerifyRequest - Verification token and code
   * @returns ForgotPasswordResponse - Verification token for password reset
   */

  forgotPasswordVerify(request: ForgotPasswordVerifyRequest): Observable<ForgotPasswordResponse>;

  /**
   * Reset Password
   * This method is used to set new password
   * @param ResetPasswordRequest - New password information
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  resetPassword(request: ResetPasswordRequest): Observable<GlobalResponse>;

  /**
   * Email Verify Start
   * This method is used to start email verification process
   * @param EmailVerifyStartRequest - Email to verify
   * @returns EmailVerifyStartResponse - Verification token
   */

  emailVerifyStart(request: EmailVerifyStartRequest): Observable<EmailVerifyStartResponse>;

  /**
   * Email Verify Finish
   * This method is used to complete email verification
   * @param EmailVerifyFinishRequest - Verification token and code
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  emailVerifyFinish(request: EmailVerifyFinishRequest): Observable<GlobalResponse>;
}

/**
 * Auth Service
 * This service is used to manage authentication operations
 */

export interface AuthServiceController {
  /**
   * Register Ghost
   * This method is used to start registration process
   * @param RegisterGhostRequest - Initial registration request schema
   * @returns RegisterGhostResponse - Registration token for verification
   */

  registerGhost(
    request: RegisterGhostRequest,
  ): Promise<RegisterGhostResponse> | Observable<RegisterGhostResponse> | RegisterGhostResponse;

  /**
   * Register
   * This method is used to complete registration process
   * @param RegisterRequest - Registration verification request schema
   * @returns RegisterResponse - Access and refresh tokens
   */

  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  /**
   * Login
   * This method is used to authenticate users
   * @param LoginRequest - Login credentials
   * @returns LoginResponse - Access and refresh tokens
   */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /**
   * Refresh Token
   * This method is used to get new access token using refresh token
   * @param RefreshTokenRequest - Refresh token
   * @returns RefreshTokenResponse - New access and refresh tokens
   */

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  /**
   * Logout
   * This method is used to invalidate tokens
   * @param LogoutRequest - Access token to invalidate
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  logout(request: LogoutRequest): Promise<GlobalResponse> | Observable<GlobalResponse> | GlobalResponse;

  /**
   * Forgot Password
   * This method is used to start password reset process
   * @param ForgotPasswordRequest - Email or username for password reset
   * @returns ForgotPasswordResponse - Verification token for password reset
   */

  forgotPassword(
    request: ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  /**
   * Forgot Password Verify
   * This method is used to verify password reset code
   * @param ForgotPasswordVerifyRequest - Verification token and code
   * @returns ForgotPasswordResponse - Verification token for password reset
   */

  forgotPasswordVerify(
    request: ForgotPasswordVerifyRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  /**
   * Reset Password
   * This method is used to set new password
   * @param ResetPasswordRequest - New password information
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  resetPassword(request: ResetPasswordRequest): Promise<GlobalResponse> | Observable<GlobalResponse> | GlobalResponse;

  /**
   * Email Verify Start
   * This method is used to start email verification process
   * @param EmailVerifyStartRequest - Email to verify
   * @returns EmailVerifyStartResponse - Verification token
   */

  emailVerifyStart(
    request: EmailVerifyStartRequest,
  ): Promise<EmailVerifyStartResponse> | Observable<EmailVerifyStartResponse> | EmailVerifyStartResponse;

  /**
   * Email Verify Finish
   * This method is used to complete email verification
   * @param EmailVerifyFinishRequest - Verification token and code
   * @returns grpcBoilerplate.common.GlobalResponse - Global response schema for success or error message
   */

  emailVerifyFinish(
    request: EmailVerifyFinishRequest,
  ): Promise<GlobalResponse> | Observable<GlobalResponse> | GlobalResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "registerGhost",
      "register",
      "login",
      "refreshToken",
      "logout",
      "forgotPassword",
      "forgotPasswordVerify",
      "resetPassword",
      "emailVerifyStart",
      "emailVerifyFinish",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
