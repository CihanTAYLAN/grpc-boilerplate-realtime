<!DOCTYPE html>
<html>
<head>
  <title>gRPC API Documentation</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
      /* Neon Renkler */
      --neon-blue: #00ffff;
      --neon-green: #39ff14;
      --neon-purple: #bc13fe;
      --neon-pink: #ff1493;
      --neon-yellow: #ffff00;
      --neon-orange: #ff6600;
      
      /* Temel Renkler */
      --od-bg: #1a1b26;
      --od-bg-lighter: #24283b;
      --od-bg-darker: #16161e;
      --od-text: #c0caf5;
      --od-border: #2f334d;
      --nav-width: 380px;
    }

    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, system-ui, sans-serif;
      background: var(--od-bg);
      color: var(--od-text);
    }

    /* Scroll bar stilleri */
    ::-webkit-scrollbar {
      width: 10px;
      height: 10px;
      background: transparent;
    }

    ::-webkit-scrollbar-track {
      background: var(--od-bg-darker);
      border-radius: 5px;
    }

    ::-webkit-scrollbar-thumb {
      background: var(--od-border);
      border-radius: 5px;
      border: 2px solid var(--od-bg-darker);
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--neon-blue);
      box-shadow: 0 0 8px var(--neon-blue);
    }

    .container {
      display: flex;
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
    }

    .navigation {
      width: var(--nav-width);
      height: 100vh;
      background: var(--od-bg-darker);
      padding: 1rem;
      position: fixed;
      overflow-y: auto;
      overflow-x: hidden;
      transition: width 0.3s ease;
      z-index: 100;
      scrollbar-gutter: stable;
      box-sizing: border-box;
    }

    .navigation-resizer {
      position: fixed;
      left: calc(var(--nav-width) - 2px);
      top: 0;
      width: 12px;
      height: 100vh;
      cursor: col-resize;
      z-index: 150;
      display: flex;
      align-items: center;
      justify-content: center;
      background: transparent;
      transform: translateX(-50%);
    }

    .navigation-resizer::after {
      content: '';
      width: 2px;
      height: 100%;
      background: var(--od-border);
      transition: all 0.2s ease;
      border-radius: 2px;
    }

    .navigation-resizer:hover::after,
    .navigation-resizer.resizing::after {
      width: 4px;
      background: var(--neon-blue);
      box-shadow: 0 0 8px var(--neon-blue);
    }

    .navigation h2 {
      color: var(--neon-blue);
      font-size: 1.2rem;
      margin: 0 0 1rem 0;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--od-border);
    }

    .nav-section {
      margin-bottom: 1.5rem;
    }

    .nav-section h3 {
      color: var(--neon-green);
      font-size: 1rem;
      margin: 0 0 0.5rem 0;
    }

    .nav-group {
      margin-bottom: 2rem;
      background: var(--od-bg);
      padding: 1rem;
      border-radius: 6px;
      border: 1px solid var(--od-border);
    }

    .nav-group h4 {
      color: var(--neon-purple);
      font-size: 0.9rem;
      margin: 0 0 1rem 0;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--od-border);
    }

    .nav-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .nav-list li {
      margin: 0.25rem 0;
    }

    .nav-list a {
      color: var(--od-text);
      text-decoration: none;
      font-size: 0.9rem;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      display: block;
      transition: all 0.2s;
    }

    .nav-list a:hover {
      background: rgba(0, 255, 255, 0.1);
      color: var(--neon-blue);
      box-shadow: 0 0 8px rgba(0, 255, 255, 0.2);
    }

    .nav-service {
      position: relative;
      cursor: pointer;
      margin-bottom: 0.5rem;
    }

    .nav-service-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-radius: 4px;
      transition: all 0.2s;
      background: var(--od-bg);
      border: 1px solid var(--od-border);
    }

    .nav-service-header:hover {
      background: rgba(0, 255, 255, 0.1);
      border-color: var(--neon-blue);
    }

    .nav-service-header a {
      color: var(--neon-blue);
      text-decoration: none;
      padding: .25rem .5rem;
      display: block;
      height: 100%;
      width: 100%;
    }

    .nav-service-header a:hover {
      background: none;
      box-shadow: none;
    }

    .nav-service-toggle {
      font-size: 0.8rem;
      transition: transform 0.2s;
      color: var(--neon-blue);
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 3px;
      background: rgba(0, 255, 255, 0.1);
    }

    .nav-service.expanded .nav-service-toggle {
      transform: rotate(90deg);
      background: rgba(0, 255, 255, 0.2);
    }

    .nav-methods {
      margin: 0.5rem 0 0.5rem 1rem;
      padding-left: 0.75rem;
      border-left: 2px solid var(--od-border);
      display: none;
      opacity: 0;
      transition: all 0.3s ease;
    }

    .nav-service.expanded .nav-methods {
      display: block;
      opacity: 1;
    }

    .nav-method {
      font-size: 0.85rem;
      padding: 0.4rem 0.75rem;
      color: var(--od-text);
      opacity: 0.8;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      border-radius: 3px;
      margin-bottom: 0.25rem;
      transition: all 0.2s;
    }

    .nav-method:hover {
      opacity: 1;
      color: var(--neon-blue);
      background: rgba(0, 255, 255, 0.05);
    }

    .nav-method-type {
      font-size: 0.7rem;
      padding: 0.15rem 0.3rem;
      border-radius: 2px;
      background: var(--od-bg-darker);
      border: 1px solid var(--od-border);
    }

    .nav-method:hover .nav-method-type {
      border-color: var(--neon-blue);
      background: rgba(0, 255, 255, 0.1);
    }

    .content {
      flex: 1;
      margin-left: calc(var(--nav-width));
      padding: 2rem;
      box-sizing: border-box;
      min-height: 100vh;
      overflow-x: hidden;
    }

    .method-content {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
      margin-top: 1rem;
    }

    .method-schema {
      background: var(--od-bg);
      padding: 1rem;
      border-radius: 6px;
      border: 1px solid var(--od-border);
      min-width: 0;
      overflow: visible;
      max-height: none;
    }

    .method h4 {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .method-type {
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      order: -1;
    }

    .method-type.unary {
      background: rgba(0, 255, 255, 0.1);
      color: var(--neon-blue);
    }

    .method-type.client-stream {
      background: rgba(57, 255, 20, 0.1);
      color: var(--neon-green);
    }

    .method-type.server-stream {
      background: rgba(255, 102, 0, 0.1);
      color: var(--neon-orange);
    }

    .method-type.bidirectional {
      background: rgba(188, 19, 254, 0.1);
      color: var(--neon-purple);
    }

    .field-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    .field-table th,
    .field-table td {
      padding: 0.5rem;
      text-align: left;
      border-bottom: 1px solid var(--od-border);
    }

    .field-name,
    .field-type,
    .field-rule {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
    }

    .field-name,
    .field-type{
      background: var(--od-bg-darker);
      border: 1px solid var(--od-border);
    }

    .field-rule{
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      width: min-content;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .field-rule-item {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      border: 1px solid var(--od-border);
    }

    .field-rule-item-required {
      background: var(--od-bg-darker);
      color: var(--neon-pink);
      border-color: rgba(255, 102, 0, 0.3);
    }

    .field-rule-item-optional {
      background: var(--od-bg-darker);
      color: var(--neon-green);
    }

    .field-name {
      color: var(--neon-blue);
      border-color: rgba(0, 255, 255, 0.3);
    }

    .field-type {
      color: var(--neon-green);
      border-color: rgba(57, 255, 20, 0.3);
    }

    .field-type.has-nested {
      cursor: pointer;
      position: relative;
      padding-right: 1.5rem;
    }

    .field-type.has-nested::after {
      content: 'â–¶';
      position: absolute;
      right: 0.5rem;
      top: 50%;
      transform: translateY(-50%);
      font-size: 0.8rem;
      transition: transform 0.2s ease;
      color: var(--neon-blue);
      text-shadow: 0 0 5px var(--neon-blue);
    }

    .field-type.has-nested.expanded::after {
      transform: translateY(-50%) rotate(90deg);
    }

    .field-type.has-nested:hover::after {
      text-shadow: 0 0 8px var(--neon-blue);
    }

    .description {
      padding: 0.75rem;
      margin: 0.5rem 0;
      background: var(--od-bg-lighter);
      border-left: 3px solid var(--neon-yellow);
      border-radius: 0 4px 4px 0;
      color: var(--od-text);
      font-style: italic;
      font-family: 'Courier New', Courier, monospace;
      line-height: 1;
      font-weight: 700;
      font-size: .8rem;
    }

    .nested-schema {
      margin-top: 0.5rem;
      padding-left: 1rem;
      border-left: 2px solid var(--od-border);
      overflow: hidden;
      transition: all 0.3s ease;
      opacity: 1;
    }

    .nested-schema.hidden {
      opacity: 0;
      max-height: 0;
      margin-top: 0;
    }

    .stream-badge {
      color: var(--neon-purple);
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
    }

    .message-schema-content{
      overflow: auto;
    }
    
  </style>
  <script>
    function toggleNestedSchema(element) {
      const nestedSchema = element.parentElement.querySelector('.nested-schema');
      if (nestedSchema) {
        if (nestedSchema.classList.contains('hidden')) {
          nestedSchema.style.display = 'block';
          requestAnimationFrame(() => {
            nestedSchema.classList.remove('hidden');
          });
        } else {
          nestedSchema.classList.add('hidden');
          nestedSchema.addEventListener('transitionend', function handler() {
            if (nestedSchema.classList.contains('hidden')) {
              nestedSchema.style.display = 'none';
            }
            nestedSchema.removeEventListener('transitionend', handler);
          });
        }
        element.classList.toggle('expanded');
      }
    }

    function initializeNavResizer() {
      const container = document.querySelector('.container');
      const nav = document.querySelector('.navigation');
      const resizer = document.createElement('div');
      resizer.className = 'navigation-resizer';
      container.appendChild(resizer);

      let isResizing = false;
      let startX;
      let startWidth;

      function startResizing(e) {
        isResizing = true;
        startX = e.clientX;
        startWidth = parseInt(getComputedStyle(nav).width, 10);
        
        resizer.classList.add('resizing');
        document.body.style.cursor = 'col-resize';
        document.body.style.userSelect = 'none';
        
        document.addEventListener('mousemove', handleResizing);
        document.addEventListener('mouseup', stopResizing);
      }

      function handleResizing(e) {
        if (!isResizing) return;

        const width = startWidth + (e.clientX - startX);
        const minWidth = 200;
        const maxWidth = window.innerWidth * 0.4;
        
        if (width >= minWidth && width <= maxWidth) {
          document.documentElement.style.setProperty('--nav-width', width + 'px');
        }
      }

      function stopResizing() {
        isResizing = false;
        resizer.classList.remove('resizing');
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
        
        document.removeEventListener('mousemove', handleResizing);
        document.removeEventListener('mouseup', stopResizing);
      }

      resizer.addEventListener('mousedown', startResizing);
    }

    function toggleServiceMethods(element, event) {
      if (!element) return;

      const service = element.closest('.nav-service');
      if (!service) return;

      const methods = service.querySelector('.nav-methods');
      if (!methods) return;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }

      const isExpanded = service.classList.contains('expanded');
      
      document.querySelectorAll('.nav-service.expanded').forEach(openService => {
        if (openService !== service) {
          const openMethods = openService.querySelector('.nav-methods');
          if (openMethods) {
            openService.classList.remove('expanded');
            openMethods.style.opacity = '0';
            setTimeout(() => {
              openMethods.style.display = 'none';
            }, 300);
          }
        }
      });
      
      if (isExpanded) {
        service.classList.remove('expanded');
        methods.style.opacity = '0';
        setTimeout(() => {
          methods.style.display = 'none';
        }, 300);
      } else {
        service.classList.add('expanded');
        methods.style.display = 'block';
        setTimeout(() => {
          methods.style.opacity = '1';
        }, 10);
      }
    }

    function expandServiceFromHash() {
      const hash = window.location.hash;
      if (hash) {
        const collapsedService = document.querySelector('.nav-service.expanded');
        if (collapsedService && collapsedService.classList.contains('expanded')) {
          collapsedService.classList.remove('expanded');
          collapsedService.querySelector('.nav-methods').style.display = 'none';
          collapsedService.querySelector('.nav-methods').style.opacity = '0';
        }
        
        const serviceName = hash.replace('#', '').replace('service-', '').split('-')[0];
        const serviceLink = document.querySelector(`[href="#service-${serviceName}"]`);
        const serviceHeader = serviceLink.parentElement;
        if (serviceLink && serviceHeader) {
          serviceHeader.click();
        }
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      initializeNavResizer();

      const methods = document.querySelectorAll('.method');
      methods.forEach(method => {
        const isRequestStream = method.dataset.requestStream === 'true';
        const isResponseStream = method.dataset.responseStream === 'true';
        const typeSpan = method.querySelector('.method-type');
        
        if (typeSpan) {
          let type = 'Unary';
          if (isRequestStream && isResponseStream) type = 'Bidirectional';
          else if (isRequestStream) type = 'Client Stream';
          else if (isResponseStream) type = 'Server Stream';
          
          if(type === 'Unary') typeSpan.textContent = 'âš¡ Unary';
          if(type === 'Bidirectional') typeSpan.textContent = 'â†” Bidirectional';
          if(type === 'Client Stream') typeSpan.textContent = 'â†— Client Stream';
          if(type === 'Server Stream') typeSpan.textContent = 'â†™ Server Stream';
          typeSpan.className = 'method-type ' + type.toLowerCase().replace(' ', '-');
        }
      });

      expandServiceFromHash();
      window.addEventListener('hashchange', expandServiceFromHash);
    });
  </script>
</head>
<body>
  <div class="container">
    <div class="navigation">
      <h2>API Documentation</h2>
        <div class="nav-section">
          <h3>{{protoFileName}}</h3>
          <div class="nav-group">
            <h4>Services</h4>
            {{#each services}}
              <ul class="nav-list">
                <li class="nav-service">
                  <div class="nav-service-header" onclick="toggleServiceMethods(this, event)">
                    <a href="#service-{{name}}" class="nav-service-name">{{name}}</a>
                    <span class="nav-service-toggle">â–¶</span>
                  </div>
                  <div class="nav-methods">
                    {{#each methods}}
                      <a href="#service-{{../name}}-method-{{name}}" class="nav-method">
                        {{#if requestStream}}
                          {{#if responseStream}}
                            <span class="nav-method-type">â†”</span>
                          {{else}}
                            <span class="nav-method-type">â†—</span>
                          {{/if}}
                        {{else}}
                          {{#if responseStream}}
                            <span class="nav-method-type">â†™</span>
                          {{else}}
                            <span class="nav-method-type">âš¡</span>
                          {{/if}}
                        {{/if}}
                        {{name}}
                      </a>
                    {{/each}}
                  </div>
                </li>
              </ul>
            {{/each}}
          </div>
           <div class="nav-group">
            <h4>Messages</h4>
            {{#each messages}}
              <ul class="nav-list">
                <li class="nav-service">
                  <div class="nav-service-header">
                    <a href="#message-{{name}}" class="nav-service-name">{{name}}</a>
                  </div>
                </li>
              </ul>
            {{/each}}
          </div>
          <div class="nav-group">
            <h4>Enums</h4>
            {{#each enums}}
              <ul class="nav-list">
                <li class="nav-service">
                  <div class="nav-service-header">
                    <a href="#enum-{{name}}" class="nav-service-name">{{name}}</a>
                  </div>
                </li>
              </ul>
            {{/each}}
          </div>
        </div>
    </div>
    <div class="content">
      {{#each services}}
        <div class="service" id="service-{{name}}">
          <h3>{{name}}</h3>
          {{#if comment}}
            <p class="description">{{comment}}</p>
          {{/if}}
          {{#each methods}}
            <div class="method" id="service-{{../name}}-method-{{name}}" data-request-stream="{{requestStream}}" data-response-stream="{{responseStream}}">
              <h4>
                <span class="method-type"></span>
                {{name}}
              </h4>
              {{#if comment}}
                <p class="description">{{comment}}</p>
              {{/if}}
              <div class="method-content">
                <div class="method-schema">
                  <h5>Request: <code>{{requestType}}</code>{{#if requestStream}} <span class="stream-badge">âš¡ stream</span>{{/if}}</h5>
                  {{{requestSchema}}}
                </div>
                <div class="method-schema">
                  <h5>Response: <code>{{responseType}}</code>{{#if responseStream}} <span class="stream-badge">âš¡ stream</span>{{/if}}</h5>
                  {{{responseSchema}}}
                </div>
              </div>
            </div>
          {{/each}}
        </div>
      {{/each}}
      {{#each messages}}
        <div class="message" id="message-{{name}}">
          <h3>{{name}}</h3>
          {{{comment}}}
          {{{schema}}}
        </div>
      {{/each}}
      {{#each enums}}
        <div class="enum" id="enum-{{name}}">
          <h3>{{name}}</h3>
          {{{comment}}}
          {{{schema}}}
        </div>
      {{/each}}
    </div>
  </div>
</body>
</html> 